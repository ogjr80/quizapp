name: Preview Environment
on:
  pull_request:
    types: [closed]
    branches: [deploy]
  workflow_dispatch:
permissions:
  contents: write
  id-token: write
  packages: write
  pull-requests: write
jobs:
  build-heritage-staging:
    name: Initial Review Phase üßµ
    runs-on: ubuntu-latest
    environment: preview
    steps:
      - name: Checkout code üß≥
        uses: actions/checkout@v4.1.7
      - name: Setup Node üç≥
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 20
      - name: setup pnpm üë®‚Äçüíª
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9.6.0
          run_install: false
      - name: Install pnpm üí†
        run: pnpm install --no-frozen-lockfile
      - name: build Application üì¶
        run: pnpm build
  Container-Registry:
    name: Build & Push Image üê≥
    runs-on: ubuntu-latest
    needs: build-heritage-staging
    environment: preview
    steps:
      - name: Checkout code üß≥
        uses: actions/checkout@v4.1.7
      - name: Setup Node üç≥
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 20
      - name: setup pnpm üë®‚Äçüíª
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9.6.0
          run_install: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: create env file
        run: |
          echo "
          AUTH_URL=${{secrets.AUTH_URL}}
          AUTH_SECRET=${{secrets.AUTH_SECRET}}
          AUTH_GOOGLE_ID=${{secrets.AUTH_GOOGLE_ID}}
          AUTH_AZURE_AD_SECRET=${{secrets.AUTH_AZURE_AD_SECRET}}
          AUTH_AZURE_AD_TENANT=${{secrets.AUTH_AZURE_AD_TENANT}}
          AUTH_AZURE_AD_ID=${{secrets.AUTH_AZURE_AD_ID}}
          AUTH_GOOGLE_SECRET=${{secrets.AUTH_GOOGLE_SECRET}}
          ">.env
      - run: sudo apt-get update && sudo apt-get install jq -y
      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" > $GITHUB_OUTPUT
      - name: Extract tag
        id: extract-tag
        run: |
          # Extract the tag without the 'v' prefix
          TAG=${GITHUB_REF#refs/tags/v}
          # Replace any characters that are not allowed in Docker image tags with a valid alternative, for example, replacing '/' with '-'
          TAG=$(echo "$TAG" | tr / -)
          VERSION=$(jq -r '.version' package.json)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "VERSION=${SHORT_SHA}" >> $GITHUB_OUTPUT
          # Set the modified tag as an output
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
      - name: Build and Push Production Image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository }}:prod-${{steps.extract-tag.outputs.VERSION}} \
            --build-arg DATABASE_URL=${{secrets.DATABASE_URL}} \
            .
          docker push ghcr.io/${{ github.repository }}:prod-${{steps.extract-tag.outputs.VERSION}}
      
  Demo-Image-Registry:
    name: Build Demo Image üê≥
    runs-on: ubuntu-latest
    needs: build-heritage-staging
    environment: preview
    steps:
      - name: Checkout code üß≥
        uses: actions/checkout@v4.1.7
      - name: Setup Node üç≥
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 20
      - name: setup pnpm üë®‚Äçüíª
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9.6.0
          run_install: false
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: create env file
        run: |
          echo "
          AUTH_URL=${{secrets.DEMO_NEXT_PUBLIC_URL}}
          AUTH_SECRET=${{secrets.AUTH_SECRET}}
          AUTH_GOOGLE_ID=${{secrets.AUTH_GOOGLE_ID}}
          AUTH_AZURE_AD_SECRET=${{secrets.AUTH_AZURE_AD_SECRET}}
          AUTH_AZURE_AD_TENANT=${{secrets.AUTH_AZURE_AD_TENANT}}
          AUTH_AZURE_AD_ID=${{secrets.AUTH_AZURE_AD_ID}}
          AUTH_GOOGLE_SECRET=${{secrets.AUTH_GOOGLE_SECRET}}
          ">.env
      - run: sudo apt-get update && sudo apt-get install jq -y
      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" > $GITHUB_OUTPUT
      - name: Extract tag
        id: extract-tag
        run: |
          # Extract the tag without the 'v' prefix
          TAG=${GITHUB_REF#refs/tags/v}
          # Replace any characters that are not allowed in Docker image tags with a valid alternative, for example, replacing '/' with '-'
          TAG=$(echo "$TAG" | tr / -)
          VERSION=$(jq -r '.version' package.json)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "VERSION=${SHORT_SHA}" >> $GITHUB_OUTPUT
          # Set the modified tag as an output
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "TAG=$TAG" >> $GITHUB_OUTPUT
      - name: Build and Push Demo Image
        run: |
          docker build \
            -t ghcr.io/${{ github.repository }}:demo-${{steps.extract-tag.outputs.VERSION}} \
            --build-arg DATABASE_URL=${{secrets.DEMO_DATABASE_URL}} \
            .
          docker push ghcr.io/${{ github.repository }}:demo-${{steps.extract-tag.outputs.VERSION}}
    
  Deploy-To-Prod:
    name: Deploy to Production üöÄ
    runs-on: ubuntu-latest
    needs: [Container-Registry]
    environment: preview
    steps:
      - name: Checkout code üß≥
        uses: actions/checkout@v4.1.7
      - name: Setup Node üç≥
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 20
      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(jq -r '.version' package.json)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "VERSION=${SHORT_SHA}" >> $GITHUB_OUTPUT
      - name: setup pnpm üë®‚Äçüíª
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9.6.0
          run_install: false
      - name: Install packages üí†
        run: pnpm install --no-frozen-lockfile
      - name: Sync Database
        run: |
          echo "db synced"
        env:
          DATABASE_URL: ${{secrets.DATABASE_URL}}
      - name: Login to azure
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.AZURE_CREDS }}
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3.0.2
        with:
          app-name: heritage
          images: ghcr.io/${{github.repository}}:prod-${{steps.extract-version.outputs.VERSION}}
  Deploy-To-Demo:
    name: Deploy to demo environment üè°
    runs-on: ubuntu-latest
    needs: [Demo-Image-Registry]
    environment: preview
    steps:
      - name: Checkout code üß≥
        uses: actions/checkout@v4.1.7
      - name: Setup Node üç≥
        uses: actions/setup-node@v4.0.3
        with:
          node-version: 20
      - name: Extract version
        id: extract-version
        run: |
          VERSION=$(jq -r '.version' package.json)
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "VERSION=${SHORT_SHA}" >> $GITHUB_OUTPUT
      - name: setup pnpm üë®‚Äçüíª
        uses: pnpm/action-setup@v4.0.0
        with:
          version: 9.6.0
          run_install: false
      - name: Install packages üí†
        run: pnpm install --no-frozen-lockfile
      - name: Sync Database
        run: |
          echo "db synced"
        env:
          DATABASE_URL: ${{secrets.DATABASE_URL}}
      - name: Login to azure
        uses: azure/login@v2.1.1
        with:
          creds: ${{ secrets.AZURE_EMO_CRED }}
      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3.0.2
        with:
          app-name: demo
          images: ghcr.io/${{github.repository}}:demo-${{steps.extract-version.outputs.VERSION}}
