generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-arm64-openssl-1.1.x", "debian-openssl-3.0.x"]
}

model GameHistory {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  score          Int
  totalQuestions Int
  createdAt      DateTime @default(now())
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  gameHistory   GameHistory[]
  highScores    HighScore[]
  gamePlays     GamePlay[]
  achievements  Achievement[]
  Points        Points[]
  gameSession   GameSession?
  teamSession   TeamSession?    @relation(fields: [teamSessionId], references: [id])
  teamSessionId String?
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model HighScore {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  score      Int
  difficulty String
  createdAt  DateTime @default(now())
}

model GamePlay {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  score         Int
  difficulty    String
  totalAnswered Int
  createdAt     DateTime @default(now())
}

model Achievement {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  name      String
  createdAt DateTime @default(now())
}

model Points {
  id          String        @id @default(cuid())
  userId      String        @unique
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  stages      ScoreTypes[]
  score       Int
  intraScores IntraScores[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
}

model IntraScores {
  id        String     @id @default(cuid())
  points    Points?    @relation(fields: [pointsId], references: [id], onDelete: Cascade)
  pointsId  String?
  score     Int
  questions Question[]
  type      ScoreTypes
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([pointsId, type])
}

model Question {
  id            String       @id @default(cuid())
  name          String
  type          ScoreTypes
  intraScores   IntraScores? @relation(fields: [intraScoresId], references: [id], onDelete: Cascade)
  intraScoresId String?

  @@index([intraScoresId])
}

model GameSession {
  id            String       @id @default(cuid())
  userId        String?      @unique
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  teamSessionId String?      @unique
  teamSession   TeamSession? @relation(fields: [teamSessionId], references: [id])
  startTime     DateTime     @default(now())
  endTime       DateTime     @default(dbgenerated("NOW() + INTERVAL '12 minutes'"))
  isActive      Boolean      @default(false)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@index([userId])
  @@index([teamSessionId])
}

model TeamSession {
  id           String        @id @default(cuid())
  name         String
  users        User[]
  gameSessions GameSession[]
  isActive     Boolean       @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ScoreTypes {
  DIVERSITY
  STORYTELLING
  CHALLENGE
  UNITY
}

model Admin {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
